install.packages("knitr")
tP <- read.tree(file = "TP_Phylo/Data/SpneA01.ComD_muscle_Poisson_tree.ph")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
gene_description = read.table("Gene_description_CleanUp.csv", sep = ',', header=TRUE)
tP <- read.tree(file = "TP_Phylo/Data/SpneA01.ComD_muscle_Poisson_tree.ph")
install.packages(BiocStyle)
BiocStyle::markdown()
install.packages(BiocStyle)
markdown()
suppressPackageStartupMessages(library("DT"))
install.packages("DT")
install.packages("BiocManager")
install.packages("mzR")
install.packages("MSnbase")
install.packages("mzID")
install.packages("rpx")
install.packages("MALDIquant")
install.packages("MALDIquantForeign")
install.packages("rols")
install.packages("hpar")
install.packages("BRAIN")
install.packages("org.Hs.eg.db")
install.packages("GO.db")
install.packages("Rdisop")
install.packages("biomaRt")
BiocStyle::markdown()
suppressPackageStartupMessages(library("DT"))
suppressPackageStartupMessages(library("BiocManager"))
suppressPackageStartupMessages(library("mzR"))
install.packages("mzR")
BiocManager::install()
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(version = "3.20")
install.packages("~/Téléchargements/BiocManager_1.30.25.tar.gz", repos = NULL, type = "source")
BiocStyle::markdown()
install.packages("BiocManager")
BiocStyle::markdown()
install.packages("BiocManager", repos = "https://cloud.r-project.org")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
version
update(R)
update(r)
update()
update
install.packages("updateR")
version
version
library(tidyverse)
library(ade4)
#library(rpart)
#library(MASS)
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
res = chisq.test(commu[,2:17]) ; res$
plot(habitat)
plot(commu)
setwd("~/Bureau/fr.univ-tlse3_ADM_project/scripts")
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
res = chisq.test(commu[,2:17]) ; res$
res2 = list()
for (i in 2:17){
print(chisq.test(commu[,i])$p.value)
}
plot(habitat)
res = chisq.test(habitat[,4:19]) ; res
# Dépendance des données
acp_habitat = dudi.pca(habitat[,4:19], scale=T, nf = 2, scannf = F)
plot(acp_habitat$li,
pch = 3)
s.corcircle(acp_habitat$co,
grid = F)
acp_habitat$c1
# 1 variable expliquant peu le modèle : hydro (faible pourcentage d'explication des axes, <10%)
plot(commu)
res = chisq.test(commu[,2:17]) ; res
# Indépendance des données
afc1 = dudi.coa(commu, nf=2, scannf = F)
afc1
barplot(afc1$eig)
scatter(afc1)
acc1 = cca(afc1, acp_habitat)
plot(habitat)
res = chisq.test(habitat[,4:19]) ; res
# Dépendance des données
acp_habitat = dudi.pca(habitat[,4:19], scale=T, nf = 2, scannf = F)
plot(acp_habitat$li,
pch = 3)
s.corcircle(acp_habitat$co,
grid = F)
acp_habitat$c1
# 1 variable expliquant peu le modèle : hydro (faible pourcentage d'explication des axes, <10%)
plot(commu)
res = chisq.test(commu[,2:17]) ; res
# Indépendance des données
afc1 = dudi.coa(commu, nf=2, scannf = F)
afc1
barplot(afc1$eig)
scatter(afc1)
# Log des données
log_habitat = log(habitat +1)
# Log des données
data("rpjdl")
View(rpjdl)
View(rpjdl)
caract_habitat = habitat - habitat$IdPE
caract_habitat = habitat[-1]
caract_habitat = habitat[,-1]
caract_habitat = habitat[,-1:3]
caract_habitat = habitat[,-(1:3)]
log_habitat = log(caract_habitat +1)
cca = pcaiv(afc1, log_habitat)
cca
cca = pcaiv(afc1, log_habitat)
s.corcircle(cca$as)
cca = pcaiv(afc1, log_habitat, scannf = F)
s.corcircle(cca$as)
cca = pcaiv(afc1, log_habitat, scannf = F, nf = 6)
s.corcircle(cca$as)
cca = pcaiv(afc1, log_habitat, scannf = F, nf = 2)
s.corcircle(cca$as)
s.label(cca$l1, clabel = 0, cpoint = 1.5)
#représentation des espèces
s.label(cca$co, add.plot = T)
# Poids canoniques donnant les combinaisons de variance unité
s.arrow(cca$fa)
# Prédiction des positions par régression sur les variables de milieu
s.match(cca$li, cca$ls, clabel = 0.5)
# Ensemble des résultats de l'analyse
plot(cca)
acc1 = cca(afc1, acp_habitat)
cca
library(vegan)
