, scannf = FALSE, nf = 2)
plot(afd.Frag.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Frag.Taille$fa,
grid = F)
s.corcircle(afd.Frag.Taille$li)
s.corcircle(afd.CondTopo.Taille$li,
grid = F)
# discrimin = AFC
# les arg : (acp, var qualitative)
afd.Ecoute.Taille = discrimin(acp.Ecoute,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ecoute.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Ecoute.Taille$fa,
grid = F)
s.corcircle(afd.Ecoute.Taille$li,
grid = F)
#########
afd.Ocuu.Taille = discrimin(acp.Ocuu,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ocuu.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Ocuu.Taille$fa,
grid = F)
s.corcircle(afd.Ocuu.Taille$li,
grid = F)
########
afd.Frag.Taille = discrimin(acp.Frag,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Frag.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Frag.Taille$fa,
grid = F)
s.corcircle(afd.Fra.Taille$li,
grid = F)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=4, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
#cache = true ==> si a déja fait le calcule le refais pas car met tout dans le cache
# Chunk 2: setup
library(ade4)
data(rpjdl)
library(vegan)
data(varespec)
data(varechem)
data("fruits")
# Chunk 3
millog = log(rpjdl$mil+1)
# le + 1 permet de pouvoir faire le log()
# on le fait car c'est des %
coa1 = dudi.coa(rpjdl$fau, scannf = FALSE, nf = 2)
cca1 = pcaiv(coa1, millog, scannf = FALSE, nf = 2)
# Chunk 4
summary(coa1)
summary(cca1)
# Chunk 5
s.corcircle(cca1$as, grid = F)
# Chunk 6
s.label(cca1$l1,clabel = 0,cpoint = 1.5, pch = 3, grid = F)
#position des relevé par combinaison de variables environnementales
s.label(cca1$co, add.plot = T, grid = F)
#position des moyennes de chaque espèces
# Chunk 7
s.arrow(cca1$fa, grid = F)
s.match(cca1$li,cca1$ls,
clabel = 0.4, pch = 3,
grid = F)
s.match(cca1$li,cca1$ls,
clabel = 0.4, pch = 3,
grid = F)
labels
install.packages("ade4")
library(tidyverse)
library(ade4)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(tidyverse)
library(ade4)
#library(rpart)
#library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t", stringsAsFactors = T, header = T, na.strings = T)
habitat = habitat[,-2:-3]
habitat[,2:3] = habitat[,2:3]/1e5 ;# habitat[15] = habitat[15]/1e3
name = colnames(habitat)
name[2:3] = c("long/1e5","lat/1e5");# name[15] = "prec/1e3"
colnames(habitat) = name
# Chunk 4
# Récupération des noms des colonnes correspondant aux espèces (colonnes 2 à 17)
vectNom = names(commu[2:17])
# Création d'une liste vide pour stocker les sous-ensembles
listSubsets = list()
# Parcours de toutes les espèces
for (i in 1:length(vectNom)) {
especesActu = vectNom[i]
# Extraction des numéros de lieu (IdPE) où l'espèce a une présence (valeur 1)
foosubset = commu$IdPE[commu[[especesActu]] == 1]
listSubsets[[especesActu]] = foosubset
}
listSubsets$Gem
# Chunk 5
par(mfrow = c(1,1))
ExGem = colMeans(subset(habitat, habitat$IdPE %in% listSubsets$Gem))
plot(ExGem[-1])
# Chunk 6
ExMat = t(sapply(names(listSubsets), function(name) {
colMeans(subset(habitat, habitat$IdPE %in% listSubsets[[name]]))
}))
ExMat = ExMat[,-1]
# Chunk 7
boxplot(ExMat,
pch = 3, col = "darkred",
las = 2, log = "y")
# Chunk 8
par(mfrow = c(1,2))
#   1. Point d'écoute :
plot(ExMat[,1:2],
pch = 3, col = "brown")
acp.Ecoute = dudi.pca(ExMat[,1:2]
,scannf = FALSE, nf = 1)
plot(acp.Ecoute$li,
pch = 3, col = "brown")
#  2. Occupation du sol :
boxplot(ExMat[,3:7],
pch = 3, col = "darkgreen")
acp.Ocuu = dudi.pca(ExMat[,3:7]
,scannf = FALSE, nf = 2)
plot(acp.Ocuu$li,
pch = 3, col = "darkgreen")
#  3. Fragmentation :
boxplot(ExMat[,8:11],
pch = 3, col = "salmon")
acp.Frag = dudi.pca(ExMat[,8:11]
,scannf = FALSE, nf = 2)
plot(acp.Frag$li,
pch = 3, col = "salmon")
#  4. Topographie
plot(ExMat[,12:13],
pch = 3, col = "black")
acp.Topo = dudi.pca(ExMat[,12:13]
,scannf = FALSE, nf = 1)
plot(acp.Topo$li,
pch = 3, col = "black")
#  5. condition topographique
plot(ExMat[,14:15],
pch = 3, col = "darkblue")
acp.CondTopo = dudi.pca(ExMat[,14:15]
,scannf = FALSE, nf = 1)
plot(acp.CondTopo$li,
pch = 3, col = "darkblue")
#  6. Urbanisation
par(mfrow = c(1,1))
boxplot(ExMat[,16],
pch = 3, col = "darkgray")
# 7. Total
par(mfrow = c(1,2))
boxplot(ExMat,
pch = 3, col = "darkred",
las = 2, log = "y")
acp.Total = dudi.pca(ExMat[,1:15])
acp.Total = dudi.pca(ExMat[,1:15])
anova(acp.Ecoute)
# discrimin = AFD
# les arg : (acp, var qualitative)
afd.Ecoute.Taille = discrimin(acp.Ecoute,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ecoute.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Ecoute.Taille$fa,
grid = F)
s.corcircle(afd.Ecoute.Taille$li,
grid = F)
afd.Ecoute.Taille = discrimin(acp.Ecoute,as.factor(especes$Taille)
discrimin(acp.Ecoute,as.factor(especes$Taille)
discrimin(acp.Ecoute,as.factor(especes$Taille))
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(tidyverse)
library(ade4)
#library(rpart)
#library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t", stringsAsFactors = T, header = T, na.strings = T)
habitat = habitat[,-2:-3]
habitat[,2:3] = habitat[,2:3]/1e5 ;# habitat[15] = habitat[15]/1e3
name = colnames(habitat)
name[2:3] = c("long/1e5","lat/1e5");# name[15] = "prec/1e3"
colnames(habitat) = name
# Chunk 4
# Récupération des noms des colonnes correspondant aux espèces (colonnes 2 à 17)
vectNom = names(commu[2:17])
# Création d'une liste vide pour stocker les sous-ensembles
listSubsets = list()
# Parcours de toutes les espèces
for (i in 1:length(vectNom)) {
especesActu = vectNom[i]
# Extraction des numéros de lieu (IdPE) où l'espèce a une présence (valeur 1)
foosubset = commu$IdPE[commu[[especesActu]] == 1]
listSubsets[[especesActu]] = foosubset
}
listSubsets$Gem
# Chunk 5
par(mfrow = c(1,1))
ExGem = colMeans(subset(habitat, habitat$IdPE %in% listSubsets$Gem))
plot(ExGem[-1])
# Chunk 6
ExMat = t(sapply(names(listSubsets), function(name) {
colMeans(subset(habitat, habitat$IdPE %in% listSubsets[[name]]))
}))
ExMat = ExMat[,-1]
# Chunk 7
boxplot(ExMat,
pch = 3, col = "darkred",
las = 2, log = "y")
# Chunk 8
par(mfrow = c(1,2))
#   1. Point d'écoute :
plot(ExMat[,1:2],
pch = 3, col = "brown")
acp.Ecoute = dudi.pca(ExMat[,1:2]
,scannf = FALSE, nf = 1)
plot(acp.Ecoute$li,
pch = 3, col = "brown")
#corrélation +
#  2. Occupation du sol :
boxplot(ExMat[,3:7],
pch = 3, col = "darkgreen")
acp.Ocuu = dudi.pca(ExMat[,3:7]
,scannf = FALSE, nf = 2)
plot(acp.Ocuu$li,
pch = 3, col = "darkgreen")
# pas de corrélation
#  3. Fragmentation :
boxplot(ExMat[,8:11],
pch = 3, col = "salmon")
acp.Frag = dudi.pca(ExMat[,8:11]
,scannf = FALSE, nf = 2)
plot(acp.Frag$li,
pch = 3, col = "salmon")
# pas de corrélation
#  4. Topographie
plot(ExMat[,12:13],
pch = 3, col = "black")
acp.Topo = dudi.pca(ExMat[,12:13]
,scannf = FALSE, nf = 1)
plot(acp.Topo$li,
pch = 3, col = "black")
# corrélation +
#  5. condition topographique
plot(ExMat[,14:15],
pch = 3, col = "darkblue")
acp.CondTopo = dudi.pca(ExMat[,14:15]
,scannf = FALSE, nf = 1)
plot(acp.CondTopo$li,
pch = 3, col = "darkblue")
# corrélation -
#  6. Urbanisation
par(mfrow = c(1,1))
boxplot(ExMat[,16],
pch = 3, col = "darkgray")
# c'est une ligne
# 7. Total
par(mfrow = c(1,2))
boxplot(ExMat,
pch = 3, col = "darkred",
las = 2, log = "y")
acp.Total = dudi.pca(ExMat[,1:15], scannf = FALSE, nf = 2)
# bordel imonde
# Chunk 9
# discrimin = AFD
# les arg : (acp, var qualitative)
afd.Ecoute.Taille = discrimin(acp.Ecoute,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ecoute.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Ecoute.Taille$fa,
grid = F)
s.corcircle(afd.Ecoute.Taille$li,
grid = F)
#########
afd.Ocuu.Taille = discrimin(acp.Ocuu,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ocuu.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Ocuu.Taille$fa,
grid = F)
s.corcircle(afd.Ocuu.Taille$li,
grid = F)
########
afd.Frag.Taille = discrimin(acp.Frag,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Frag.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Frag.Taille$fa,
grid = F)
s.corcircle(afd.Frag.Taille$li,
grid = F)
########
afd.Mat.Taille = discrimin(acp.Topo,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ecoute.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Mat.Taille$fa,
grid = F)
s.corcircle(afd.Mat.Taille$li,
grid = F)
########
afd.CondTopo.Taille = discrimin(acp.CondTopo,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.CondTopo.Taille)
par(mfrow = c(1,2))
s.arrow(afd.CondTopo.Taille$fa,
grid = F)
s.corcircle(afd.CondTopo.Taille$li,
grid = F)
# Chunk 10
cca1 = cca(especes ~ Ca, tabenv)
cca1 = cca(especes ~ habitat)
cca1 = dudi.cca(especes ~ Ca, habitat)
cca1 = cca(especes ~ Ca, habitat)
library(tidyverse)
library(ade4)
cca1 = cca(especes ~ Ca, habitat)
cca1 = dudi.coa(especes ~ Ca, habitat)
cca1 = dudi.coa(especes ~ habitat)
cca1 = dudi.coa(especes)
View(cca1)
anova(cca1)
library(vegan)
install.packages("vegan")
cca1 = cca(especes)
library(vegan)
cca1 = cca(especes)
cca1 = cca(especes~acp.Ecoute)
anova(cca1)
cca1 = cca(especes~acp.Ecoute)
anova(cca1)
View(acp.Ecoute)
especes <- na.omit(especes)  # Remove NAs
cca1 = cca(especes)
cca1 = cca(especes)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(tidyverse)
library(ade4)
library(vegan)
#library(rpart)
#library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t", stringsAsFactors = T, header = T, na.strings = T)
habitat = habitat[,-2:-3]
habitat[,2:3] = habitat[,2:3]/1e5 ;# habitat[15] = habitat[15]/1e3
name = colnames(habitat)
name[2:3] = c("long/1e5","lat/1e5");# name[15] = "prec/1e3"
colnames(habitat) = name
# Chunk 4
# Récupération des noms des colonnes correspondant aux espèces (colonnes 2 à 17)
vectNom = names(commu[2:17])
# Création d'une liste vide pour stocker les sous-ensembles
listSubsets = list()
# Parcours de toutes les espèces
for (i in 1:length(vectNom)) {
especesActu = vectNom[i]
# Extraction des numéros de lieu (IdPE) où l'espèce a une présence (valeur 1)
foosubset = commu$IdPE[commu[[especesActu]] == 1]
listSubsets[[especesActu]] = foosubset
}
listSubsets$Gem
# Chunk 5
par(mfrow = c(1,1))
ExGem = colMeans(subset(habitat, habitat$IdPE %in% listSubsets$Gem))
plot(ExGem[-1])
# Chunk 6
ExMat = t(sapply(names(listSubsets), function(name) {
colMeans(subset(habitat, habitat$IdPE %in% listSubsets[[name]]))
}))
ExMat = ExMat[,-1]
# Chunk 7
boxplot(ExMat,
pch = 3, col = "darkred",
las = 2, log = "y")
# Chunk 8
par(mfrow = c(1,2))
#   1. Point d'écoute :
plot(ExMat[,1:2],
pch = 3, col = "brown")
acp.Ecoute = dudi.pca(ExMat[,1:2]
,scannf = FALSE, nf = 1)
plot(acp.Ecoute$li,
pch = 3, col = "brown")
#corrélation +
#  2. Occupation du sol :
boxplot(ExMat[,3:7],
pch = 3, col = "darkgreen")
acp.Ocuu = dudi.pca(ExMat[,3:7]
,scannf = FALSE, nf = 2)
plot(acp.Ocuu$li,
pch = 3, col = "darkgreen")
# pas de corrélation
#  3. Fragmentation :
boxplot(ExMat[,8:11],
pch = 3, col = "salmon")
acp.Frag = dudi.pca(ExMat[,8:11]
,scannf = FALSE, nf = 2)
plot(acp.Frag$li,
pch = 3, col = "salmon")
# pas de corrélation
#  4. Topographie
plot(ExMat[,12:13],
pch = 3, col = "black")
acp.Topo = dudi.pca(ExMat[,12:13]
,scannf = FALSE, nf = 1)
plot(acp.Topo$li,
pch = 3, col = "black")
# corrélation +
#  5. condition topographique
plot(ExMat[,14:15],
pch = 3, col = "darkblue")
acp.CondTopo = dudi.pca(ExMat[,14:15]
,scannf = FALSE, nf = 1)
plot(acp.CondTopo$li,
pch = 3, col = "darkblue")
# corrélation -
#  6. Urbanisation
par(mfrow = c(1,1))
boxplot(ExMat[,16],
pch = 3, col = "darkgray")
# c'est une ligne
# 7. Total
par(mfrow = c(1,2))
boxplot(ExMat,
pch = 3, col = "darkred",
las = 2, log = "y")
acp.Total = dudi.pca(ExMat[,1:15], scannf = FALSE, nf = 2)
# bordel imonde
# Chunk 9
# discrimin = AFD
# les arg : (acp, var qualitative)
afd.Ecoute.Taille = discrimin(acp.Ecoute,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ecoute.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Ecoute.Taille$fa,
grid = F)
s.corcircle(afd.Ecoute.Taille$li,
grid = F)
#########
afd.Ocuu.Taille = discrimin(acp.Ocuu,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ocuu.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Ocuu.Taille$fa,
grid = F)
s.corcircle(afd.Ocuu.Taille$li,
grid = F)
########
afd.Frag.Taille = discrimin(acp.Frag,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Frag.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Frag.Taille$fa,
grid = F)
s.corcircle(afd.Frag.Taille$li,
grid = F)
########
afd.Mat.Taille = discrimin(acp.Topo,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.Ecoute.Taille)
par(mfrow = c(1,2))
s.arrow(afd.Mat.Taille$fa,
grid = F)
s.corcircle(afd.Mat.Taille$li,
grid = F)
########
afd.CondTopo.Taille = discrimin(acp.CondTopo,as.factor(especes$Taille)
, scannf = FALSE, nf = 2)
plot(afd.CondTopo.Taille)
par(mfrow = c(1,2))
s.arrow(afd.CondTopo.Taille$fa,
grid = F)
s.corcircle(afd.CondTopo.Taille$li,
grid = F)
str(especes)
cca1 = cca(especes)
View(especes)
cca1 = cca(as.factor(especes)
cca1 = cca(as.factor(especes))
cca1 = cca(as.factor(especes))
especes
cca1 = cca(ExMat[,1:2]~especes)
cca1 = cca(ExMat[,1:2])
anova(cca1)
ACM1 = dudi.acm(ExMat[,1:2])
ACM1 = dudi.acm(as.factor(ExMat[,1:2]))
anova(cca1)
dudi.acm(as.factor(ExMat[,1:2]))
View(acp.Ecoute)
