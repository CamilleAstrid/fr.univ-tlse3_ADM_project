setwd("~/Bureau/fr.univ-tlse3_ADM_project/scripts")
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
install.packages("~/Téléchargements/knitr_1.49.tar.gz", repos = NULL, type = "source")
install.packages("R6")
install.packages("~/Téléchargements/knitr_1.49.tar.gz", repos = NULL, type = "source")
install.packages("xfun")
install.packages("yaml")
install.packages("~/Téléchargements/evaluate_1.0.3.tar.gz", repos = NULL, type = "source")
install.packages("~/Téléchargements/highr_0.11.tar.gz", repos = NULL, type = "source")
install.packages("~/Téléchargements/yaml_2.3.10.tar.gz", repos = NULL, type = "source")
install.packages("~/Téléchargements/xfun_0.50.tar.gz", repos = NULL, type = "source")
install.packages("~/Téléchargements/xfun_0.50.tar.gz", repos = NULL, type = "source")
install.packages("~/Téléchargements/xfun_0.50.tar.gz", repos = NULL, type = "source")
library(tidyverse)
library(ade4)
install.packages("tidyverse")
install.packages("googledrive")
install.packages("curl")
install.packages("tidyverse")
install.packages("ragg")
install.packages("textshaping")
PKG_CFLAGS=-I/usr/include/harfbuzz -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/glib-2.0 -I/usr/include/fribidi
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("~/Téléchargements/tidyverse_2.0.0.tar.gz", repos = NULL, type = "source")
install.packages("ragg")
install.packages("~/Téléchargements/ragg_1.3.3.tar.gz", repos = NULL, type = "source")
install.packages("textshaping")
install.packages("textshaping")
install.packages("ragg")
install.packages("~/Téléchargements/ragg_1.3.3.tar.gz", repos = NULL, type = "source")
library(tidyverse)
library(tidyverse)
library(ade4)
library(rpart)
library(MASS)
library(xfun)
library(yaml)
library(markdown)
library(BiocManager)
library(tidyverse)
library(ade4)
library(rpart)
library(MASS)
library(tidyverse)
library(ade4)
library(rpart)
library(MASS)
# présence de l'espèce : commu colonnes
# caractéristiques du milieu : habitat lignes
# chi-2 entre espèce et chaque caractéristique du milieu
habitat = habitat[,-2:-3]
chisq.test(commu, habitat)
taille = length(commu[,1])
file.create("chi-2_q1_export.txt")
file.edit()
for (index_espece in 1:taille){
for (index_localisation in 1:taille){
data_chi2_q1 = chisq.test(commu[,index_espece], habitat[,index_localisation])
pvalue = data_chi2_q1$p.value
texte = paste(paste(commu[,index_espece], habitat[,index_localisation], sep = ","), pvalue, sep = ",")
write.csv(x = texte,
file = "chi-2_q1_export.txt",
append = TRUE,
fileEncoding = "UTF-8")
}
}
summary()
View(commu)
View(commu)
res = chisq.test(commu)
res
res = chisq.test(commu[,2:]) ; res
res = chisq.test(commu[,2:17]) ; res
res = chisq.test(commu[2:17,]) ; res
res = chisq.test(commu[,2:17]) ; res
for (i in 2:17){
chisq.test(commu[,i])
}
for (i in 2:17){
res2 = chisq.test(commu[,i]); res2
}
View(res2)
View(res2)
res2 = list()
for (i in 2:17){
append(res2, chisq.test(commu[,i]))
}
View(res2)
View(res2)
res2 = []
res2 = []
res2 = c()
for (i in 2:17){
append(res2, chisq.test(commu[,i]))
}
res = chisq.test(commu[,2:17]) ; res$
res2 = c()
for (i in 2:17){
append(res2, chisq.test(commu[,i])$p.value)
}
res = chisq.test(commu[,2:17]) ; res$
res2 = list()
for (i in 2:17){
append(res2, chisq.test(commu[,i])$p.value)
}
res2 = list()
for (i in 2:17){
append(res2, chisq.test(commu[,i])$p.value)
}
View(res2)
View(res2)
View(res2)
for (i in 2:17){
print(chisq.test(commu[,i])$p.value)
}
View(habitat)
View(habitat)
View(especes)
View(especes)
acp_habitat = dudi.pca(habitat, scale=T)
View(acp_habitat)
View(acp_habitat)
plot(acp_habitat)
plot(acp_habitat$li)
plot(acp_habitat$li[,1])
acp_habitat
View(acp_habitat)
9/17
plot(habitat)
res = chisq.test(habitat[,2:12])
res = chisq.test(habitat[,2:12]) ; res
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
res = chisq.test(habitat[,4:19]) ; res
# Dépendance des données
plot(habitat)
# Dépendance des données
plot(habitat)
acp_habitat = dudi.pca(habitat[,4:19], scale=T)
acp_habitat = dudi.pca(habitat[,4:19], scale=T, nf = 2, scannf = T)
plot(acp_habitat$li[,1])
acp_habitat = dudi.pca(habitat[,4:19], scale=T, nf = 2, scannf = F)
plot(acp_habitat$li[,1])
plot(acp_habitat$li)
plot(acp_habitat$li,
pch = 3)
s.corcircle(acp_habitat)
s.corcircle(acp_habitat$co)
s.corcircle(acp_habitat$co,
grid = F)
acp_habitat$eig
View(acp_habitat)
View(acp_habitat)
acp_habitat$tab
acp_habitat$cw
acp_habitat$c1
plot(commu)
afc_commu = dudi.fca(commu[,2:17]); afc_commu
res = chisq.test(commu[,2:17]) ; res
plot(afc_commu$li,
pch = 3)
afc_commu = dudi.fca(commu[,2:17], nf = 2, scannf = F)
plot(afc_commu$li,
pch = 3)
afc_commu = dudi.fca(commu[,2:17], nf = 2, scannf = F)
afc_commu = dudi.fca(commu[,2:17])
afc1 = dudi.coa(commu)
scatter(afc1)
afc1 = dudi.coa(commu)
afc1 = dudi.coa(commu, nf=2, scannf = F)
afc1
barplot(afc1$eig)
scatter(afc1)
afc1 = dudi.coa(commu, nf=1, scannf = F)
afc1
barplot(afc1$eig)
scatter(afc1)
scatter(afc1)
afc1 = dudi.coa(commu, nf=3, scannf = F)
afc1
barplot(afc1$eig)
scatter(afc1)
afc1 = dudi.coa(commu, nf=2, scannf = F)
afc1
barplot(afc1$eig)
scatter(afc1)
