stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
swd("/fr.univ-tlse3_ADM_project")
setwd("/media/jan_codage/CORSAIR/cours/ADM/Projo/fr.univ-tlse3_ADM_project")
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
habitat = read.table("data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
setwd("/media/jan_codage/CORSAIR/cours/ADM/Projo/fr.univ-tlse3_ADM_project")
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
setwd("/media/jan_codage/CORSAIR/cours/ADM/Projo/fr.univ-tlse3_ADM_project")
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
setwd("/media/jan_codage/CORSAIR/cours/ADM/Projo/fr.univ-tlse3_ADM_project/scripts")
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
acm1 = dudi.acm(commu,scannf = F, nf = 2)
acm1 = dudi.acm(commu[,2:length(commu[,1])],scannf = F, nf = 2)
commu[,1] = ""
commu = commu[,2:length(commu(1,))]
commu = commu[,2:length(commu[1,])]
acm1 = dudi.acm(commu,scannf = F, nf = 2)
ours
# Chunk 1
library(ade4)
# Chunk 2
tab = matrix(c(140,160,150,50, 20,10,50,20, 40,30,100,230),ncol=3)
colnames(tab) = c("Univ","Prepa","IUT")
rownames(tab) = c("L","ES","S","Tech")
summary(tab)
barplot(tab, col = rainbow(4))
legend(x= "topright" ,legend = c("L","ES","S","Tech"), pch = 15,col = rainbow(4))
# Chunk 3
res = chisq.test(tab); res ; res$expected
# Chunk 4
afc1 = dudi.coa(tab, nf = 2, scannf = F); summary(afc1)
# Chunk 5
scatter(afc1, main = "planfactoriel de l'axe 1 et 2")
par(mfrow = c(1,2))
s.label(afc1$li,grid = F)
s.label(afc1$co,grid = F)
# Chunk 6
data("santacatalina")
afc2 = dudi.coa(santacatalina,F,2); summary(afc2)
# Chunk 7
par (mfrow = c(1,1))
barplot(as.matrix(santacatalina), col = rainbow(10))
# Chunk 8
scatter(afc2, posi = "topright", grid = F )
par (mfrow = c(1,2))
s.label(afc2$li,grid = F)
s.label(afc2$co,grid = F)
# Chunk 9
par(mfrow=c(1,1))
# Chunk 10
score(afc2,xax = 1, dotchart = T)
# Chunk 11
data("ours")
# Chunk 12
summary(ours)
# Chunk 13
for (i in c(1:8)){
suppressWarnings(print(chisq.test(ours[,i],ours[,9])))
}
# Chunk 14
acm1 = dudi.acm(ours,scannf = F, nf = 2)
summary(acm1)
ours
```{r}
library(ade4)
library(rpart)
library(MASS)
library(MASS)
```{r}
```{r}
View(ours)
commu[,1] = as.string(commu[,1])
commu[,1] = as.character(commu[,1]) as
commu[,1] = as.character(commu[,1])
View(commu)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(ade4)
library(rpart)
library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
# Chunk 6
summary(commu)
commu[,1] = as.character(commu[,1])
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
View(commu)
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
View(ours)
View(ours)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(ade4)
library(rpart)
library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
summary(commu)
commu = as.character(commu)
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
commu = as.factor(commu)
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(ade4)
library(rpart)
library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
# Chunk 6
summary(commu)
commu = as.factor(commu)
summary(acm1)
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
summary(acm1)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(ade4)
library(rpart)
library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
# Chunk 6
summary(commu)
commu = as.factor(commu)
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
summary(commu)
commu = as.factor(commu)
commu = as.factor(commu)
summary(commu)
commu = as.factor(as.character(commu))
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
summary(acm1)
acm1 = dudi.acm(commu,
scannf = F, nf = 3)
summary(acm1)
plot(acm1);
View(acm1)
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
```{r}
plot(acm1$li);
plot(acm1$li,co);
plot(acm1$co);
plot(acm1$co);
plot(acm1$co,
pch = 3);
plot(acm1$co,
pch = 3, labels = acm1);
plot(acm1$co,
pch = 3, labels = acm1$co);
plot(acm1$co,
pch = 3, ... = );
plot(acm1$co,
pch = 3);
s.corcircle(acm1)
s.corcircle(acm1$co)
s.corcircle(acm1$li)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(ade4)
library(rpart)
library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
summary(commu)
commu.asfact = as.factor(as.character(commu))
# Chunk 6
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
View(acm1)
View(acm1)
plot(acm1$as,
pch = 3, ) ;
plot(acm1$co,
pch = 3, ) ;
s.corcircle(acm1$li)
s.corcircle(acm1$as)
s.corcircle(acm1$co)
s.corcircle(acm1$li)
s.corcircle(acm1$li,
grid = F)
plot(acm1,
pch = 3, ) ;
data("ours")
acm1 = dudi.acm(ours,scannf = F, nf = 2)
summary(acm1)
s.arrow(acm1$co,clabel = 0.6)
scatter(acm1,col = rainbow(7))
scatter(acm1,col = rainbow(7))
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(ade4)
library(rpart)
library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
summary(commu)
commu.asfact = as.factor(as.character(commu))
# Chunk 6
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
s.corcircle(acm1$li,
grid = F)
scatter(acm1,col = rainbow(7))
summary(commu)
commu.asfact = as.factor(as.character(commu))
acm1 = dudi.acm(commu,
scannf = F, nf = 2)
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
```{r}
library(ade4)
library(rpart)
library(MASS)
library(MASS)
Ouverture donn√©es :
```{r}
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
```{r}
plot(habitat)
plot(commu)
plot(especes)
plot(habitat)
plot(commu)
plot(especes)
## QUESTION 1
communaut√©s :
--\> quelles sont les esp√®ces qui vivent ensemble ? m√™me localisation
acm1 = dudi.acm(commu.asfact,
scannf = F, nf = 2)
plot(acm1,
pch = 3, ) ;
plot(acm1,
pch = 3, ) ;
acm1 = dudi.acm(commu.asfact,
scannf = F, nf = 2)
summary(acm1)
s.corcircle(acm1$li,
grid = F)
scatter(acm1,col = rainbow(7))
scatter(acm1)
scatter(acm1)
acm1 = dudi.acm(commu.asfact,
scannf = F, nf = 2)
summary(acm1)
View(ours)
View(commu)
suppressWarnings(print(chisq.test(commu[,i],commu[,1])))
for (i in c(1:length(commu[1,]))){
suppressWarnings(print(chisq.test(commu[,i],commu[,1])))
}
suppressWarnings(print(chisq.test(commu)))
for (i in c(1:length(commu[1,]))){
suppressWarnings(print(chisq.test(commu)))
}
suppressWarnings(print(chisq.test(commu)))
chisq.test(commu)
suppressWarnings(chisq.test(commu))
acm1 = dudi.acm(commu.asfact,
scannf = F, nf = 2)
s.corcircle(acm1$li,
grid = F)
summary(acm1)
dudi.acm(commu.asfact
scatter(acm1)
scatter(acm1)
scatter.dudi(acm1)
scatter.dudi(acm1)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(ade4)
library(rpart)
library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
summary(commu)
commu.asfact = as.factor(as.character(commu))
# Chunk 6
suppressWarnings(chisq.test(commu))
# Chunk 7
acm1 = dudi.acm(commu.asfact,
scannf = F, nf = 2)
# Chunk 8
summary(acm1)
s.corcircle(acm1$li,
grid = F)
scatter.dudi(acm1)
detach("package:MASS", unload = TRUE)
library(tidyverse)
library(ade4)
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(tidyverse)
library(ade4)
#library(rpart)
#library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
# Chunk 5
summary(commu)
commu.asfact = as.factor(as.character(commu))
# Chunk 6
suppressWarnings(chisq.test(commu))
# Chunk 7
acm1 = dudi.acm(commu.asfact,
scannf = F, nf = 2)
# Chunk 8
summary(acm1)
s.corcircle(acm1$li,
grid = F)
scatter.dudi(acm1)
scatter(acm1)
acm1$cr
acm1 = dudi.acm(commu.asfact)
acm1 = dudi.acm(commu)
data("ours")
View(ours)
summary(commu)
commu.asfact = as.factor(as.character(commu))
commu.asfact
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
commu.asfact = data.frame()
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
# Chunk 1
knitr::opts_chunk$set(fig.align="center", fig.width=6, fig.height=6, fig.path="Figs/", echo=TRUE, warning=FALSE, message=FALSE, cache=TRUE)
# Chunk 2
library(tidyverse)
library(ade4)
#library(rpart)
#library(MASS)
# Chunk 3
habitat = read.table("../data/habitat.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
especes = read.table("../data/especes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
commu = read.table("../data/communautes.tsv", sep = "\t",
stringsAsFactors = T, header = T, na.strings = T)
# Chunk 4
plot(habitat)
plot(commu)
plot(especes)
summary(commu)
commu.asfact = data.frame()
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
commu.asfact = matrix(nrow = length(commu[,1]), ncol = length(commu[,1]))
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
commu.asfact = as.factor(as.character(commu))
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
commu.asfact = matrix(nrow = length(commu[,1]), ncol = length(commu[,1]))
View(commu.asfact)
commu.asfact = matrix(nrow = length(commu[,1]), ncol = length(commu[,1]))
commu.asfact = matrix(nrow = length(commu[,1]), ncol = length(commu[1,]))
View(commu.asfact)
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
View(commu.asfact)
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
acm1 = dudi.acm(commu.asfact)
commu.asfact[,i] = as.factor(as.character(commu[,i]))
commu.asfact = data_frame(matrix(nrow = length(commu[,1]), ncol = length(commu[1,])))
for (i in 1:length(commu[1,])){
commu.asfact[,i] = as.factor(as.character(commu[,i]))
}
View(commu.asfact)
